plugins {
    id 'maven-publish'
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}


group = 'com.example.jpa'
version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

repositories {
    mavenLocal()
    maven { name "Alibaba" ; url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
}

dependencies {

    // spring data rest的依赖，由于我们使用的是spring boot 所以只需要添加starter即可
    implementation("org.springframework.boot:spring-boot-starter-data-rest")
//  springfox 2020.7 停止更新
    //我们添加 swagger方便看得出来，生成了哪些api接口
//    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    // swagger 对spring data reset支持需要天添加 springfox-data-rest
//    implementation 'io.springfox:springfox-data-rest:3.0.0'

    //将swagger切换成springdoc
    //http://localhost:8091/swagger-ui/index.html
//    https://blog.csdn.net/qq_40977118/article/details/124387411?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-124387411-blog-129100908.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-124387411-blog-129100908.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=1
    implementation("org.springdoc:springdoc-openapi-ui:1.6.15")
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    implementation 'com.google.guava:guava:30.0-jre'
//    implementation 'com.querydsl:querydsl-apt'
    implementation 'io.micrometer:micrometer-registry-prometheus'
//    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.jayway.jsonpath:json-path'
    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly('mysql:mysql-connector-java')
//    runtimeOnly('com.mysql:mysql-connector-j')
    runtimeOnly 'com.h2database:h2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.querydsl:querydsl-apt'
    implementation 'com.querydsl:querydsl-jpa'
    // update the query dsl version, e.g:
    implementation 'com.querydsl:querydsl-core:5.0.0'

//    annotationProcessor("com.querydsl:querydsl-apt:4.3.1:jpa",
//            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
//            "javax.annotation:javax.annotation-api:1.3.2",
//            "org.projectlombok:lombok")

    annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testRuntimeOnly 'com.h2database:h2'
    implementation 'org.jetbrains:annotations:15.0'
}

test {
    useJUnitPlatform()
}
